include required(classpath("application"))

docker {
  hash-lookup {
    # Set this to match your available quota against the Google Container Engine API
    #gcr-api-queries-per-100-seconds = 1000

    # Time in minutes before an entry expires from the docker hashes cache and needs to be fetched again
    #cache-entry-ttl = "20 minutes"

    # Maximum number of elements to be kept in the cache. If the limit is reached, old elements will be removed from the cache
    #cache-size = 200

    # How should docker hashes be looked up. Possible values are "local" and "remote"
    # "local": Lookup hashes on the local docker daemon using the cli
    # "remote": Lookup hashes on docker hub, gcr, gar, quay
    method = "local"
  }
}


backend {
  default = LSF

  providers {
    LSF {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      config {

        concurrent-job-limit = 1000
        script-epilogue = "sleep 5"
        run-in-background = true
        runtime-attributes = """

            Int memory_gb =  240
            Int runtime_minutes = 3200
            Int cpu = 16
            String? docker

        """


        submit = "bsub -J ${job_name} -cwd ${cwd} -o ${out} -e ${err} /usr/bin/env bash ${script}"

        submit-docker = """
            # Build the Docker image into a singularity image, using the head node
            DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docker})
            IMAGE=/data/weirauchlab/databank/appdata/GATK/Images/$DOCKER_NAME.sif
            if [ ! -f $IMAGE ]; then
                singularity build $IMAGE docker://${docker}
            fi

            bsub -J ${job_name} -cwd ${cwd} -o ${out} -e ${err}  -M $((((${memory_gb}+3)) * 1024))  -R rusage[mem=$(
            (14 * 1024))] -n ${cpu}  -R  span[ptile=${cpu}] -W ${runtime_minutes} singularity exec --containall --bind ${cwd}:${docker_cwd} $IMAGE ${job_shell} ${docker_script}

        """

        kill = "bkill ${job_id}"
        check-alive = "bjobs ${job_id}"
        job-id-regex = "Job <(\\d+)>.*"

      }
    }
  }
}